---
title: "Open raw data + make train/test split"
format: html
editor: source
---

```{r}
library(here)
library(tidyverse)
library(tidymodels)
```

```{r}
raw_data_dir <- here("data")
prepped_data_dir <- here("data-prepped")
```

## Open up the data

```{r}
train_df <- data.table::fread(here(raw_data_dir, 
                                   'training_data',
                                   'PreFer_train_data.csv'),
                              keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
                              data.table = FALSE) # returns a data.frame object rather than data.table

background_df <- data.table::fread(here(raw_data_dir, 
                                        'other_data', 
                                        'PreFer_train_background_data.csv'),
                                   keepLeadingZeros = TRUE,
                                   data.table = FALSE)

outcome_df <- data.table::fread(here(raw_data_dir, 
                                     'training_data', 
                                     'PreFer_train_outcome.csv'),
                                 keepLeadingZeros = TRUE,
                                 data.table = FALSE)

# for now, not using supplementary data (which includes people who are
# not in the right age range)
```

## Open up the codebook

```{r}
codebook <- read_csv(here(raw_data_dir, 
                          'codebooks', 
                          'PreFer_codebook.csv'))

codebook_summary <- read_csv(here(raw_data_dir, 
                                  'codebooks', 
                                  'PreFer_codebook_summary.csv'))

```
## Pick out the variables we'll use

```{r}
fixed_covars <- c(
  birthyear_bg = "Birth year of respondent; created and cleaned",
  gender_bg = "Gender of respondent; created and cleaned",
  # TODO - leave this out for now, b/c it is missing in some cases
  #migration_background_bg = "Migration background of the respondent; created and cleaned",
  age_bg = "The age of the respondent for each wave; created (not fixed, but records similar information as birthyear)"
)

varying_covars <- c(
  "partner",
  "woonvorm",
  "burgstat",
  "woning",
  "sted",
  "brutohh_f",
  "nettohh_f",
  "belbezig",
  "brutoink",
  "nettoink",
  "oplzon",
  "oplmet",
  "oplcat",
  "brutoink_f",
  "netinc",
  "nettoink_f"
)

covars <- c(
  nomem_encr = "Number of household member encrypted",
  nohouse_encr = "Number of household encrypted",
  wave = "Year and month of the field work period",
  positie = "Position within the household",
  lftdcat = "Age in CBS (Statistics Netherlands) categories",
  lftdhhh = "Age of the household head",
  aantalhh = "Number of household members",
  aantalki = "Number of living-at-home children in the household, children of the household head or his/her partner",
  partner = "The household head lives together with a partner (wedded or unwedded)",
  burgstat = "Civil status",
  woonvorm = "Domestic situation",
  woning = "Type of dwelling that the household inhabits",
  belbezig = "Primary occupation",
  brutoink = "Personal gross monthly income in Euros",
  nettoink = "Personal net monthly income in Euros (incl. nettocat)",
  brutocat = "Personal gross monthly income in categories",
  nettocat = "Personal net monthly income in categories",
  oplzon = "Highest level of education irrespective of diploma",
  oplmet = "Highest level of education with diploma",
  oplcat = "Level of education in CBS (Statistics Netherlands) categories",
  doetmee = "Household member participates in the panel",
  sted = "Urban character of place of residence",
  simpc = "Does the household have a simPC?",
  brutoink_f = "Personal gross monthly income in Euros, imputed",
  netinc = "Personal net monthly income in Euros",
  nettoink_f = "Personal net monthly income in Euros, imputed",
  brutohh_f = "Gross household income in Euros",
  nettohh_f = "Net household income in Euros",
  werving = "From which recruitment wave the household originates",
  birthyear_imp = "Year of birth [imputed by PreFer organisers] (based on original gebjaar variable)",
  gender_imp = "Gender [imputed by PreFer organisers] (based on original geslacht variable)",
  migration_background_imp = "Origin [imputed by PreFer organisers] (based on original herkomstgroep variable)",
  age_imp = "Age of the household member [imputed by PreFer organisers] (based on original leeftijd variable)"
)
```


# Create a train/test split

Notes:

- this should be done at the **household** level (though it may not make a huge difference)
- if we're using the 'extra' data from Nick, that should all be in the training set and not the test set
  (though that makes the training set unbalanced?)

```{r}
background_to_use <- background_df %>%
  # for each respondent
  group_by(nomem_encr) %>% 
  # pick the most recent wave
  filter(wave == max(wave)) %>%
  ungroup() %>%
  # most recent hh id 
  mutate(most_recent_hh = nohouse_encr) %>%
  select(nomem_encr, nohouse_encr)
```


```{r}
simple_df <- train_df %>% 
  # only use data for which outcome is observed
  filter(outcome_available == 1) %>%
  left_join(outcome_df, by=c('nomem_encr')) %>%
  #mutate(new_child = as.factor(new_child)) %>%
  left_join(background_to_use,
            by=c('nomem_encr')) 

any_new_child_in_hh <- simple_df %>%
  group_by(nohouse_encr) %>%
  summarize(any_new_child_in_hh = max(new_child))

df_for_split <- simple_df %>%
  left_join(any_new_child_in_hh, 
            by=c('nohouse_encr')) %>%
  #mutate(any_new_child_in_hh = factor(any_new_child_in_hh)) %>%
  ## HERE, select any vars we want to use
  select(contains(names(fixed_covars)), 
         contains(varying_covars), 
         contains(covars), 
         # these are needed for stratified train/test split 
         nohouse_encr, 
         any_new_child_in_hh, 
         # these are pretty much required
         # outcome
         new_child, 
         # id
         nomem_encr) %>%
  mutate(new_child = factor(new_child))

set.seed(101319)

#simple_df_split <- initial_split(simple_df,
df_split <- group_initial_split(df_for_split, 
                                group=nohouse_encr,
                                prop=0.8, 
                                pool = 0,
                                #strata=new_child)
                                strata=any_new_child_in_hh)
df_test <- testing(df_split)

df_train <- training(df_split)

folds <- vfold_cv(df_train, v=10)
```

```{r}
saveRDS(lst(df_train, folds),
        file=here(prepped_data_dir, 'train_split.rds'))
saveRDS(df_test,
        file=here(prepped_data_dir, 'test_split.rds'))
```





