---
title: "Logistic model"
format: html
editor: source
---

```{r}
library(here)
library(tidyverse)
library(tidymodels)
library(bundle)
```

```{r}
raw_data_dir <- here("data")
prepped_data_dir <- here("data-prepped")
```

## Open up the data

```{r}
rec <- unbundle(readRDS(file=here(prepped_data_dir, 'recipe.rds')))
                
train_data <- readRDS(file=here(prepped_data_dir, 'train_split.rds'))

df_train <- train_data$df_train
folds <- train_data$folds
```


BART 

Tune the number of trees

```{r}
bart_model <- 
  bart(trees = tune()) %>%
  set_engine('dbarts') %>%
  set_mode('classification')

bart_workflow <-
  workflow() %>%
  add_model(bart_model) %>%
  add_recipe(rec)

bart_tune_grid <- tibble(trees = c(50, 100, 150, 200, 250, 300))


bart_tune_res <- bart_workflow %>% 
  tune_grid(resamples = folds,
            grid = bart_tune_grid,
            control = control_grid(verbose = FALSE, save_pred = TRUE),
            metrics = metric_set(recall, precision, f_meas))

bart_best_mod <- bart_tune_res %>%
  select_best(metric = "f_meas")
  

bart_fit <-
  bart_workflow %>%
  finalize_workflow(bart_best_mod) %>%
  fit(data = df_train)
```

Plot to show results of tuning

```{r}
autoplot(bart_tune_res, metric='f_meas') + theme_minimal()
```

```{r}
saveRDS(bundle(bart_fit),
        file=here(prepped_data_dir, 'fit_bart.rds'))
```

