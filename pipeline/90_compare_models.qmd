---
title: "Open raw data + make train/test"
format: html
editor: source
---

```{r}
library(here)
library(tidyverse)
library(tidymodels)
library(bundle)
```

```{r}
raw_data_dir <- here("data")
prepped_data_dir <- here("data-prepped")
```

## Open up the data

```{r}
train_data <- readRDS(file=here(prepped_data_dir, 'train_split.rds'))
df_test <- readRDS(file=here(prepped_data_dir, 'test_split.rds'))

df_train <- train_data$df_train
folds <- train_data$folds
```

Helper functions

```{r}
source('99_helper.R')
```


## Load fitted models

```{r}
dt_fit <- unbundle(readRDS(file=here(prepped_data_dir, 'fit_decision_tree.rds')))
boosted_trees_fit <- unbundle(readRDS(file=here(prepped_data_dir, 'fit_boosted_trees.rds')))
logistic_fit <- unbundle(readRDS(file=here(prepped_data_dir, 'fit_logistic.rds')))
glmnet_fit <- unbundle(readRDS(file=here(prepped_data_dir, 'fit_glmnet.rds')))
bart_fit <- unbundle(readRDS(file=here(prepped_data_dir, 'fit_bart.rds')))
```



calculate prediction scores 

```{r}
res <- bind_rows(
  check_fit(dt_fit, 
            df_train=df_train, 
            df_test=df_test, 
            'dt decision tree'),
  check_fit(boosted_trees_fit, 
            df_train=df_train, 
            df_test=df_test, 
            'xgboost boosted decision tree'),
  check_fit(logistic_fit, 
            df_train=df_train, df_test=df_test, 
            'glm logistic'),
  check_fit(glmnet_fit, 
            df_train=df_train, 
            df_test=df_test, 
            'glmnet'),
  check_fit(bart_fit, 
            df_train=df_train, 
            df_test=df_test, 
            'bart')
)

res
```

Only on the test data

NB: now, with some tuning, BART is the best-performing one... 

```{r}
res %>%
  filter(type == 'test') %>%
  arrange(desc(f1_score))
```




